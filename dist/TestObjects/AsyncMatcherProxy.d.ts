import { IAsyncMatcher } from "../interfaces/IAsyncMatcher.js";
import { ITestResult } from "../interfaces/ITestResult.js";
import { TestPerformance } from "../Performance/Performance.js";
import { AsyncFunction } from "../types/AsyncFunction.js";
export declare class AsyncMatcherProxy implements IAsyncMatcher {
    private m_Matcher;
    private m_TestResultStatus;
    private m_TestResultResolver;
    private m_ExpectedPromiseValue;
    constructor(i_AsyncFunctionExpectedValue: AsyncFunction, i_BeforeFunctions: Function[], i_AfterFunctions: Function[], i_Description: string);
    get TestResultStatus(): Promise<any>;
    set TestResultStatus(val: Promise<any>);
    get ExpectedValue(): Promise<any>;
    set ExpectedValue(val: Promise<any>);
    get Result(): ITestResult;
    set Result(val: ITestResult);
    get FailedString(): string;
    set FailedString(val: string);
    get Description(): string;
    set Description(val: string);
    get StartAt(): Date;
    set StartAt(val: Date);
    get Performance(): TestPerformance;
    set Performance(val: TestPerformance);
    get BeforeFunctions(): Function[];
    set BeforeFunctions(val: Function[]);
    get AfterFunctions(): Function[];
    set AfterFunctions(val: Function[]);
    get Matcher(): any;
    set Matcher(val: any);
    resolveTestResult(i_TestResult: ITestResult): void;
    initMatcher(): void;
    before(): Promise<void>;
    after(): Promise<void>;
    toBeTrue(): Promise<ITestResult>;
    toBeFalse(): Promise<ITestResult>;
    toBeTruthy(): Promise<ITestResult>;
    toBeFalsy(): Promise<ITestResult>;
    toBe(i_Param: any): Promise<ITestResult>;
    notToBe(i_Param: any): Promise<ITestResult>;
    toBeLessThan(i_Param: number): Promise<ITestResult>;
    toBeLessThanOrEqual(i_Param: number): Promise<ITestResult>;
    toBeGreaterThan(i_Param: number): Promise<ITestResult>;
    toBeGreaterThanOrEqual(i_Param: number): Promise<ITestResult>;
    deepObjectEquals(i_Obj: any): Promise<ITestResult>;
    toContain(i_param: any): Promise<ITestResult>;
    toContainEqual(i_param: any): Promise<ITestResult>;
    prepareMatcher(): Promise<void>;
    private asyncTestTemplate;
}
